package kurs002;

public enum Card {
    Card01 ("Лисенок", "Каждое утро Лисёнок просыпался, завтракал и шёл увидеться с " +
            "Бельчонком. \n Это утро не было исключением. Лисёнок пришёл на их обычное место встречи, но Бельчонка " +
            "там не было. \n Лисёнок ждал, ждал, но так и не смог дождаться своего друга. \" \n Бельчонок не пропустил " +
            "еще ни одной встречи, вдруг он попал в беду. \n \" - подумал Лисёнок. Как поступить Лисенку?"),
    Card02 ("Вернуться домой", "Вернувшись домой, Лисёнок нашёл там Бельчонка. \n " +
            "Оказалось, что Бельчонок пришёл на место встречи раньше и увидел там рой злобных пчел. \n Он поспешил " +
            "предупредить об этом Лисёнка, но они разминулись. \n Наконец-то друзья нашли друг друга! \n Игра завершилась " +
            "успехом"),
    Card03 ("Отправиться на поиски", "Все лесные жители были заняты своими делами и не \n " +
            "обращали внимания на Лисёнка и его проблему. \n" +
            "Но вдруг кто нибудь видел Бельчонка... \n 1Лисёнок не знал, что ему делать. Помогите ему."),
    Card04 ("Попытаться разузнать о Бельчонке у лесных жителей",
            "Пока Лисёнок принимал решение, лесные жители разошлись кто куда.  \n " +
            "Остались только Сова и Волк. Но у Совы бывают проблемы с памятью,  \n" +
            "а Волк может сильно разозлиться из-за расспросов. Кого выбрать?."),
    Card05 ("Расспросить Сову",
                    "Сова долго не хотела говорить, но в итоге сказала, что видела испуганного Бельчонка,   \n " +
                    "бежавшего вглубь леса. Все лесные жители знают, что в глубине леса опасно, \n" +
                    "если Бельчонок там, ему срочно нужна помощь.") ,
    Card06 ("Расспросить Волка",
            "Волк оказался вполне дружелюбным, но помочь не смог. Лишь сказал, что  \n " +
                    "маленькому лисенку не стоит бродить по лесу одному. И как  \n" +
                    "теперь поступить?");





    private Card prev;
    private Card next;
    private String title;
    private String content;

    private Card(String title, String content){
        if(title == null || content == null){
            throw new IllegalArgumentException("Wrong content");
        }
        this.title = title;
        this.content = content;
    }
    public void setNext(Card card){
        this.next = card;
    }
    void setPrev(Card card){
        this.prev = card;
    }
    public Card getNext(){
        return next;
    }
    public Card getPrev(){
        return prev;
    }
    public String getContent(){
        return content;
    }
    public String getTitle(){
        return title;
    }
}
